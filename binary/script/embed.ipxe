#!ipxe

set user-class Tinkerbell
echo Welcome to rpardini fork of Neverland!

# Allow the operator to drop to a shell
prompt --key 0x02 --timeout 2000 Press Ctrl-B for the iPXE command line... && shell ||

# Random string to enable binary patching
#a8b7e61f1075c37a793f2f92cee89f7bba00c4a8d7842ce3d40b5889032d8881
#ddd16a4fc4926ecefdfb6941e33c44ed3647133638f5e84021ea44d3152e7f97

# This is possible because the DHCP options from the original vendor PXE DHCP request
# are available to chainloaded iPXE binaries. See https://github.com/ipxe/ipxe/issues/188
set vlan-id ${43.116:string}
isset ${vlan-id} && goto boot-with-vlan ||

:iterate-interfaces
set idx:int32 0
:interfaces-loop
isset ${net${idx}/ip} && goto interfaces-loop-done || iseq ${idx} 50 && goto autoboot || inc idx && goto interfaces-loop

:interfaces-loop-done
echo Booting from net${idx}...
set retry-max:int32 10
set count:int32 1
:retry-loop1
echo trying dhcp ( attempt ${count}/${retry-max} )
dhcp net${idx} && goto done1 || iseq ${count} ${retry-max} || inc count && goto retry-loop1
:done1
autoboot net${idx} || exit

:autoboot
set retry-max:int32 10
set count:int32 1
:retry-loop2
echo trying dhcp ( attempt ${count}/${retry-max} )
dhcp && goto done2 || iseq ${count} ${retry-max} || inc count && goto retry-loop2
:done2
autoboot || exit

:boot-with-vlan
set idx:int32 0
# Find the interface that is configured with an IP, this will be the iPXE auto created vlan interface.
:loop isset ${net${idx}-${vlan-id}/ip} && goto loop_done ||
  iseq ${idx} 50 && goto error ||
  inc idx && goto loop

:loop_done
echo Booting from net${idx}-${vlan-id}...
autoboot net${idx}-${vlan-id}

:error
echo Failed to find the vlan interface
shell
